use std::sync::{Arc, Mutex};

use etebase::{
    User,
    Client,
    Account,

    Collection,
    ItemMetadata,

    PrefetchOption,

    CollectionAccessLevel,
    SignedInvitation,
    CollectionMember,
    RemovedCollection,

    UserProfile,

    pretty_fingerprint,

    utils::{
        from_base64,
        to_base64,
        randombytes,
    },

    error::Error,
    managers::{
        CollectionManager,
        ItemManager,
        CollectionInvitationManager,
        CollectionMemberManager,
    },
};

use crate::fixes::FetchOptions;

foreign_class!(class Utils {
    fn from_base64(content: &str) -> Result<Vec<u8>, Error>;
    fn to_base64(bytes: &[u8]) -> Result<String, Error>;
    fn randombytes(size: usize) -> Vec<u8>;
    fn pretty_fingerprint(content: &[u8]) -> String;
});

fn get_default_server_url() -> String {
    etebase::DEFAULT_SERVER_URL.to_owned()
}

foreign_class!(class Client {
    self_type Client;
    private constructor = empty;
    fn Client::new(client_name: &str, server_url: &str) -> Result<Client, Error>;
    fn Client::set_server_url(&mut self, server_url: &str) -> Result<(), Error>;
    fn get_default_server_url() -> String;
});

mod User_ {
    use super::*;

    pub fn set_username(this: &mut User, username: &str) {
        this.set_username(username);
    }

    pub fn get_username(this: &User) -> String {
        this.username().to_owned()
    }

    pub fn set_email(this: &mut User, email: &str) {
        this.set_email(email);
    }

    pub fn get_email(this: &User) -> String {
        this.email().to_owned()
    }
}

foreign_class!(class User {
    self_type User;
    constructor User::new(username: &str, email: &str) -> User;
    fn User_::set_username(&mut self, username: &str);
    fn User_::get_username(&self) -> String;
    fn User_::set_email(&mut self, email: &str);
    fn User_::get_email(&self) -> String;
});

mod Account_ {
    use super::*;

    pub fn login(client: &Client, username: &str, password: &str) -> Result<Account, Error> {
        Account::login(client.clone(), username, password)
    }

    pub fn login_key(client: &Client, username: &str, main_key: Vec<u8>) -> Result<Account, Error> {
        Account::login_key(client.clone(), username, &main_key)
    }

    pub fn signup(client: &Client, user: &User, password: &str) -> Result<Account, Error> {
        Account::signup(client.clone(), user, password)
    }

    pub fn signup_key(client: &Client, user: &User, main_key: Vec<u8>) -> Result<Account, Error> {
        Account::signup_key(client.clone(), user, &main_key)
    }

    pub fn restore(client: &Client, account_data_stored: &str, encryption_key: Option<Vec<u8>>) -> Result<Account, Error> {
        Account::restore(client.clone(), account_data_stored, encryption_key.as_deref())
    }

    pub fn save(this: &Account, encryption_key: Option<Vec<u8>>) -> Result<String, Error> {
        this.save(encryption_key.as_deref())
    }
}

foreign_class!(class Account {
    self_type Account;
    private constructor = empty;
    fn Account::is_etebase_server(client: &Client) -> Result<bool, Error>;
    fn Account_::login(client: &Client, username: &str, password: &str) -> Result<Account, Error>;
    fn Account_::login_key(client: &Client, username: &str, main_key: Vec<u8>) -> Result<Account, Error>;
    fn Account_::signup(client: &Client, user: &User, password: &str) -> Result<Account, Error>;
    fn Account_::signup_key(client: &Client, user: &User, main_Key: Vec<u8>) -> Result<Account, Error>;
    fn Account::fetch_token(&mut self) -> Result<(), Error>;
    fn Account::force_server_url(&mut self, api_base: &str) -> Result<(), Error>;
    fn Account::change_password(&mut self, password: &str) -> Result<(), Error>;
    fn Account::logout(&mut self) -> Result<(), Error>;
    fn Account::collection_manager(&self) -> Result<CollectionManager, Error>; alias get_collection_manager;
    fn Account::invitation_manager(&self) -> Result<CollectionInvitationManager, Error>; alias get_invitation_manager;

    fn Account_::save(&self, encryption_key: Option<Vec<u8>>) -> Result<String, Error>;
    fn Account_::restore(client: &Client, account_data_stored: &str, encryption_key: Option<Vec<u8>>) -> Result<Account, Error>;
});

mod RemovedCollection_ {
    use super::*;

    pub fn uid(col: &RemovedCollection) -> String {
        col.uid().to_owned()
    }
}

foreign_class!(class RemovedCollection {
    self_type RemovedCollection;
    private constructor = empty;
    fn RemovedCollection_::uid(&self) -> String; alias get_uid;
});

type CollectionListResponse = etebase::CollectionListResponse<Collection>;

mod CollectionListResponse_ {
    use super::*;

    pub fn stoken(this: &CollectionListResponse) -> Option<String> {
        this.stoken().map(str::to_string)
    }

    pub fn get_removed_memberships(this: &CollectionListResponse) -> Vec<RemovedCollection> {
        match this.removed_memberships() {
            Some(removed) => removed.to_vec(),
            None => vec![],
        }
    }

    pub fn data(this: &CollectionListResponse) -> Vec<Collection> {
        this.data().to_owned()
    }
}

foreign_class!(class CollectionListResponse {
    self_type CollectionListResponse;
    private constructor = empty;
    fn CollectionListResponse_::stoken(&self) -> Option<String>; alias get_stoken;
    fn CollectionListResponse_::data(&self) -> Vec<Collection>; alias get_data;
    fn CollectionListResponse::done(&self) -> bool; alias is_done;
    fn CollectionListResponse_::get_removed_memberships(&self) -> Vec<RemovedCollection>;
});

type ItemListResponse = etebase::ItemListResponse<etebase::Item>;

mod ItemListResponse_ {
    use super::*;

    pub fn stoken(this: &ItemListResponse) -> Option<String> {
        this.stoken().map(str::to_string)
    }

    pub fn data(this: &ItemListResponse) -> Vec<Item> {
        this.data().iter().map(|x| Item::new(x.clone())).collect()
    }
}

foreign_class!(class ItemListResponse {
    self_type ItemListResponse;
    private constructor = empty;
    fn ItemListResponse_::stoken(&self) -> Option<String>; alias get_stoken;
    fn ItemListResponse_::data(&self) -> Vec<Item>; alias get_data;
    fn ItemListResponse::done(&self) -> bool; alias is_done;
});

type ItemRevisionsListResponse = etebase::IteratorListResponse<etebase::Item>;

mod ItemRevisionsListResponse_ {
    use super::*;

    pub fn iterator(this: &ItemRevisionsListResponse) -> Option<String> {
        this.iterator().map(str::to_string)
    }

    pub fn data(this: &ItemRevisionsListResponse) -> Vec<Item> {
        this.data().iter().map(|x| Item::new(x.clone())).collect()
    }
}

foreign_class!(class ItemRevisionsListResponse {
    self_type ItemRevisionsListResponse;
    private constructor = empty;
    fn ItemRevisionsListResponse_::iterator(&self) -> Option<String>; alias get_iterator;
    fn ItemRevisionsListResponse_::data(&self) -> Vec<Item>; alias get_data;
    fn ItemRevisionsListResponse::done(&self) -> bool; alias is_done;
});

foreign_enum!(enum PrefetchOption {
    Auto = PrefetchOption::Auto,
    Medium = PrefetchOption::Medium,
});

mod FetchOptions_ {
    use super::*;

    pub fn iterator(this: &mut FetchOptions, iterator: Option<String>) {
        this.iterator(iterator.as_deref())
    }
    pub fn stoken(this: &mut FetchOptions, stoken: Option<String>) {
        this.stoken(stoken.as_deref())
    }
}

// FIXME: we shouldn't clone it, we should fix it properly after #339 is fixed
foreign_class!(
    #[derive(Clone)]
    class FetchOptions {
        self_type FetchOptions;
        constructor FetchOptions::new() -> FetchOptions;
        fn FetchOptions::limit(&mut self, limit: usize);
        fn FetchOptions::prefetch(&mut self, prefetch: PrefetchOption);
        fn FetchOptions::with_collection(&mut self, with_collection: bool);
        fn FetchOptions_::iterator(&mut self, iterator: Option<String>);
        fn FetchOptions_::stoken(&mut self, stoken: Option<String>);
    }
);

mod ItemMetadata_ {
    use super::*;

    pub fn set_item_type(this: &mut ItemMetadata, type_: Option<String>) {
        this.set_item_type(type_.as_deref());
    }

    pub fn set_name(this: &mut ItemMetadata, name: Option<String>) {
        this.set_name(name.as_deref());
    }

    pub fn set_mtime(this: &mut ItemMetadata, mtime: Option<i64>) {
        this.set_mtime(mtime);
    }

    pub fn get_item_type(this: &ItemMetadata) -> Option<String> {
        this.item_type().map(str::to_string)
    }

    pub fn get_name(this: &ItemMetadata) -> Option<String> {
        this.name().map(str::to_string)
    }

    pub fn set_description(this: &mut ItemMetadata, description: Option<String>) {
        this.set_description(description.as_deref());
    }

    pub fn set_color(this: &mut ItemMetadata, color: Option<String>) {
        this.set_color(color.as_deref());
    }

    pub fn get_description(this: &ItemMetadata) -> Option<String> {
        this.description().map(str::to_string)
    }

    pub fn get_color(this: &ItemMetadata) -> Option<String> {
        this.color().map(str::to_string)
    }
}

foreign_class!(class ItemMetadata {
    self_type ItemMetadata;
    constructor ItemMetadata::new() -> ItemMetadata;
    fn ItemMetadata_::set_item_type(&mut self, type_: Option<String>);
    fn ItemMetadata_::set_name(&mut self, name: Option<String>);
    fn ItemMetadata_::set_mtime(&mut self, mtime: Option<i64>);
    fn ItemMetadata_::get_item_type(&self) -> Option<String>;
    fn ItemMetadata_::get_name(&self) -> Option<String>;
    fn ItemMetadata::mtime(&self) -> Option<i64>; alias get_mtime;
    fn ItemMetadata_::set_description(&mut self, description: Option<String>);
    fn ItemMetadata_::set_color(&mut self, color: Option<String>);
    fn ItemMetadata_::get_description(&self) -> Option<String>;
    fn ItemMetadata_::get_color(&self) -> Option<String>; alias get_color;
});

mod CollectionManager_ {
    use super::*;

    pub fn fetch(this: &CollectionManager, col_uid: &str, fetch_options: Option<FetchOptions>) -> Result<Collection, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        this.fetch(col_uid, fetch_options.as_ref())
    }

    pub fn list(this: &CollectionManager, collection_type: &str, fetch_options: Option<FetchOptions>) -> Result<CollectionListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        this.list(collection_type, fetch_options.as_ref())
    }

    pub fn list_multi(this: &CollectionManager, collection_types: Vec<String>, fetch_options: Option<FetchOptions>) -> Result<CollectionListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        this.list_multi(collection_types.iter().map(|x| &x[..]), fetch_options.as_ref())
    }

    pub fn upload(this: &CollectionManager, collection: &Collection, fetch_options: Option<FetchOptions>) -> Result<(), Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        this.upload(collection, fetch_options.as_ref())
    }

    pub fn transaction(this: &CollectionManager, collection: &Collection, fetch_options: Option<FetchOptions>) -> Result<(), Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        this.transaction(collection, fetch_options.as_ref())
    }
}

foreign_class!(class CollectionManager {
    self_type CollectionManager;
    private constructor = empty;
    fn CollectionManager_::fetch(&self, col_uid: &str, fetch_options: Option<FetchOptions>) -> Result<Collection, Error>;
    fn CollectionManager::create(&self, collection_type: &str, meta: &ItemMetadata, content: &[u8]) -> Result<Collection, Error>;
    fn CollectionManager::create_raw(&self, collection_type: &str, meta: &[u8], content: &[u8]) -> Result<Collection, Error>;
    fn CollectionManager::item_manager(&self, col: &Collection) -> Result<ItemManager, Error>; alias get_item_manager;
    fn CollectionManager_::list(&self, collection_type: &str, fetch_options: Option<FetchOptions>) -> Result<CollectionListResponse, Error>;
    fn CollectionManager_::list_multi(&self, collection_types: Vec<String>, fetch_options: Option<FetchOptions>) -> Result<CollectionListResponse, Error>;
    fn CollectionManager_::upload(&self, collection: &Collection, fetch_options: Option<FetchOptions>) -> Result<(), Error>;
    fn CollectionManager_::transaction(&self, collection: &Collection, fetch_options: Option<FetchOptions>) -> Result<(), Error>;
    fn CollectionManager::cache_load(&self, cached: &[u8]) -> Result<Collection, Error>;
    fn CollectionManager::cache_save(&self, collection: &Collection) -> Result<Vec<u8>, Error>;
    fn CollectionManager::cache_save_with_content(&self, collection: &Collection) -> Result<Vec<u8>, Error>;

    fn CollectionManager::member_manager(&self, col: &Collection) -> Result<CollectionMemberManager, Error>; alias get_member_manager;
});

mod ItemManager_ {
    use super::*;

    pub fn fetch(mgr: &ItemManager, item_uid: &str, fetch_options: Option<FetchOptions>) -> Result<Item, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        Ok(Item::new(mgr.fetch(item_uid, fetch_options.as_ref())?))
    }

    pub fn create(this: &ItemManager, meta: &ItemMetadata, content: &[u8]) -> Result<Item, Error> {
        Ok(Item::new(this.create(meta, content)?))
    }

    pub fn create_raw(this: &ItemManager, meta: &[u8], content: &[u8]) -> Result<Item, Error> {
        Ok(Item::new(this.create_raw(meta, content)?))
    }

    pub fn list(mgr: &ItemManager, fetch_options: Option<FetchOptions>) -> Result<ItemListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        mgr.list(fetch_options.as_ref())
    }

    pub fn item_revisions(mgr: &ItemManager, item: Item, fetch_options: Option<FetchOptions>) -> Result<ItemRevisionsListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        let item = item.inner.lock().unwrap();
        mgr.item_revisions(&item, fetch_options.as_ref())
    }

    pub fn fetch_updates(mgr: &ItemManager, items: Vec<Item>, fetch_options: Option<FetchOptions>) -> Result<ItemListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        let items_v: Vec<_> = items.iter().map(|x| x.inner.lock().unwrap()).collect();
        let items = items_v.iter().map(|x| &**x);
        mgr.fetch_updates(items, fetch_options.as_ref())
    }

    pub fn fetch_multi(mgr: &ItemManager, items: Vec<String>, fetch_options: Option<FetchOptions>) -> Result<ItemListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        let items = items.iter().map(|x| &**x);
        mgr.fetch_multi(items, fetch_options.as_ref())
    }

    pub fn batch(mgr: &ItemManager, items: Vec<Item>, deps: Option<Vec<Item>>, fetch_options: Option<FetchOptions>) -> Result<(), Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        let items_v: Vec<_> = items.iter().map(|x| x.inner.lock().unwrap()).collect();
        let items = items_v.iter().map(|x| &**x);
        match deps {
            Some(deps) => {
                let deps_v: Vec<_> = deps.iter().map(|x| x.inner.lock().unwrap()).collect();
                let deps = deps_v.iter().map(|x| &**x);
                mgr.batch_deps(items, deps, fetch_options.as_ref())
            },
            None => mgr.batch(items, fetch_options.as_ref()),
        }
    }

    pub fn transaction(mgr: &ItemManager, items: Vec<Item>, deps: Option<Vec<Item>>, fetch_options: Option<FetchOptions>) -> Result<(), Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        let items_v: Vec<_> = items.iter().map(|x| x.inner.lock().unwrap()).collect();
        let items = items_v.iter().map(|x| &**x);
        match deps {
            Some(deps) => {
                let deps_v: Vec<_> = deps.iter().map(|x| x.inner.lock().unwrap()).collect();
                let deps = deps_v.iter().map(|x| &**x);
                mgr.transaction_deps(items, deps, fetch_options.as_ref())
            },
            None => mgr.transaction(items, fetch_options.as_ref()),
        }
    }

    pub fn download_content(this: &ItemManager, item: &mut Item) -> Result<(), Error> {
        this.download_content(&mut item.inner.lock().unwrap())
    }

    pub fn upload_content(this: &ItemManager, item: &Item) -> Result<(), Error> {
        this.upload_content(&item.inner.lock().unwrap())
    }

    pub fn cache_load(this: &ItemManager, cached: &[u8]) -> Result<Item, Error> {
        Ok(Item::new(this.cache_load(cached)?))
    }

    pub fn cache_save(this: &ItemManager, item: &Item) -> Result<Vec<u8>, Error> {
        Ok(this.cache_save(&item.inner.lock().unwrap())?)
    }

    pub fn cache_save_with_content(this: &ItemManager, item: &Item) -> Result<Vec<u8>, Error> {
        Ok(this.cache_save(&item.inner.lock().unwrap())?)
    }
}

foreign_class!(class ItemManager {
    self_type ItemManager;
    private constructor = empty;
    fn ItemManager_::fetch(&self, item_uid: &str, fetch_options: Option<FetchOptions>) -> Result<Item, Error>;
    fn ItemManager_::create(&self, meta: &ItemMetadata, content: &[u8]) -> Result<Item, Error>;
    fn ItemManager_::create_raw(&self, meta: &[u8], content: &[u8]) -> Result<Item, Error>;
    fn ItemManager_::list(&self, fetch_options: Option<FetchOptions>) -> Result<ItemListResponse, Error>;
    fn ItemManager_::item_revisions(&self, item: Item, fetch_options: Option<FetchOptions>) -> Result<ItemRevisionsListResponse, Error>;
    fn ItemManager_::fetch_updates(&self, items: Vec<Item>, fetch_options: Option<FetchOptions>) -> Result<ItemListResponse, Error>;
    fn ItemManager_::fetch_multi(&self, items: Vec<String>, fetch_options: Option<FetchOptions>) -> Result<ItemListResponse, Error>;
    fn ItemManager_::batch(&self, items: Vec<Item>, deps: Option<Vec<Item>>, fetch_options: Option<FetchOptions>) -> Result<(), Error>;
    fn ItemManager_::transaction(&self, items: Vec<Item>, deps: Option<Vec<Item>>, fetch_options: Option<FetchOptions>) -> Result<(), Error>;
    fn ItemManager_::download_content(&self, item: &mut Item) -> Result<(), Error>;
    fn ItemManager_::upload_content(&self, item: &Item) -> Result<(), Error>;
    fn ItemManager_::cache_load(&self, cached: &[u8]) -> Result<Item, Error>;
    fn ItemManager_::cache_save(&self, item: &Item) -> Result<Vec<u8>, Error>;
    fn ItemManager_::cache_save_with_content(&self, item: &Item) -> Result<Vec<u8>, Error>;
});

foreign_enum!(enum CollectionAccessLevel {
    ReadOnly = CollectionAccessLevel::ReadOnly,
    Admin = CollectionAccessLevel::Admin,
    ReadWrite = CollectionAccessLevel::ReadWrite,
});

mod Collection_ {
    use super::*;

    pub fn verify(this: &Collection) -> bool {
        this.verify().unwrap_or(false)
    }

    pub fn uid(this: &Collection) -> String {
        this.uid().to_owned()
    }

    pub fn stoken(this: &Collection) -> Option<String> {
        this.stoken().map(str::to_string)
    }

    pub fn etag(this: &Collection) -> String {
        this.etag().to_owned()
    }

    pub fn item(this: &Collection) -> Result<Item, Error> {
        Ok(Item::new(this.item()?))
    }
}

foreign_class!(class Collection {
    self_type Collection;
    private constructor = empty;
    fn Collection_::verify(&self) -> bool;

    fn Collection::set_meta(&mut self, meta: &ItemMetadata) -> Result<(), Error>;
    fn Collection::meta(&self) -> Result<ItemMetadata, Error>; alias get_meta;
    fn Collection::set_meta_raw(&mut self, meta: &[u8]) -> Result<(), Error>;
    fn Collection::meta_raw(&self) -> Result<Vec<u8>, Error>; alias get_meta_raw;
    fn Collection::set_content(&mut self, content: &[u8]) -> Result<(), Error>; alias set_content;
    fn Collection::content(&self) -> Result<Vec<u8>, Error>; alias get_content;
    fn Collection::delete(&mut self) -> Result<(), Error>; alias del;
    fn Collection::is_deleted(&self) -> bool;
    fn Collection_::uid(&self) -> String; alias get_uid;
    fn Collection_::etag(&self) -> String; alias get_etag;
    fn Collection_::stoken(&self) -> Option<String>; alias get_stoken;
    fn Collection::access_level(&self) -> CollectionAccessLevel; alias get_access_level;
    fn Collection_::item(&self) -> Result<Item, Error>; alias get_item;
    fn Collection::collection_type(&self) -> Result<String, Error>; alias get_collection_type;
});

#[derive(Clone)]
pub struct Item {
    inner: Arc<Mutex<etebase::Item>>,
}

impl Item {
    pub fn new(inner: etebase::Item) -> Self {
        Self {
            inner: Arc::new(Mutex::new(inner))
        }
    }

    pub fn verify(&self) -> bool {
        self.inner.lock().unwrap().verify().unwrap_or(false)
    }

    pub fn uid(&self) -> String {
        self.inner.lock().unwrap().uid().to_owned()
    }

    pub fn to_inner(&self) -> std::sync::MutexGuard<etebase::Item> {
        self.inner.lock().unwrap()
    }

    pub fn set_meta(&mut self, meta: &ItemMetadata) -> Result<(), Error> {
        self.inner.lock().unwrap().set_meta(meta)
    }

    pub fn meta(&self) -> Result<ItemMetadata, Error> {
        self.inner.lock().unwrap().meta()
    }

    pub fn set_meta_raw(&mut self, meta: &[u8]) -> Result<(), Error> {
        self.inner.lock().unwrap().set_meta_raw(meta)
    }

    pub fn meta_raw(&self) -> Result<Vec<u8>, Error> {
        self.inner.lock().unwrap().meta_raw()
    }

    pub fn set_content(&mut self, content: &[u8]) -> Result<(), Error> {
        self.inner.lock().unwrap().set_content(content)
    }

    pub fn content(&self) -> Result<Vec<u8>, Error> {
        self.inner.lock().unwrap().content()
    }

    pub fn delete(&mut self) -> Result<(), Error> {
        self.inner.lock().unwrap().delete()
    }

    pub fn is_missing_content(&self) -> bool {
        self.inner.lock().unwrap().is_missing_content()
    }

    pub fn is_deleted(&self) -> bool {
        self.inner.lock().unwrap().is_deleted()
    }

    pub fn etag(&self) -> String {
        self.inner.lock().unwrap().etag().to_owned()
    }
}

foreign_class!(
    #[derive(Clone)]
    class Item {
        self_type Item;
        private constructor = empty;
        fn Item::verify(&self) -> bool;

        fn Item::set_meta(&mut self, meta: &ItemMetadata) -> Result<(), Error>;
        fn Item::meta(&self) -> Result<ItemMetadata, Error>; alias get_meta;
        fn Item::set_meta_raw(&mut self, meta: &[u8]) -> Result<(), Error>;
        fn Item::meta_raw(&self) -> Result<Vec<u8>, Error>; alias get_meta_raw;
        fn Item::set_content(&mut self, content: &[u8]) -> Result<(), Error>;
        fn Item::content(&self) -> Result<Vec<u8>, Error>; alias get_content;
        fn Item::delete(&mut self) -> Result<(), Error>; alias del;
        fn Item::is_deleted(&self) -> bool;
        fn Item::is_missing_content(&self) -> bool;
        fn Item::uid(&self) -> String; alias get_uid;
        fn Item::etag(&self) -> String; alias get_etag;
    }
);

foreign_class!(class UserProfile {
    self_type UserProfile;
    private constructor = empty;
    fn UserProfile::pubkey(&self) -> &[u8]; alias get_pubkey;
});

type InvitationListResponse = etebase::IteratorListResponse<SignedInvitation>;

mod InvitationListResponse_ {
    use super::*;

    pub fn iterator(this: &InvitationListResponse) -> Option<String> {
        this.iterator().map(str::to_string)
    }

    pub fn data(this: &InvitationListResponse) -> Vec<SignedInvitation> {
        this.data().to_owned()
    }
}

foreign_class!(class InvitationListResponse {
    self_type InvitationListResponse;
    private constructor = empty;
    fn InvitationListResponse_::iterator(&self) -> Option<String>; alias get_iterator;
    fn InvitationListResponse_::data(&self) -> Vec<SignedInvitation>; alias get_data;
    fn InvitationListResponse::done(&self) -> bool; alias is_done;
});

mod CollectionInvitationManager_ {
    use super::*;

    pub fn list_incoming(mgr: &CollectionInvitationManager, fetch_options: Option<FetchOptions>) -> Result<InvitationListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        mgr.list_incoming(fetch_options.as_ref())
    }

    pub fn list_outgoing(mgr: &CollectionInvitationManager, fetch_options: Option<FetchOptions>) -> Result<InvitationListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        mgr.list_outgoing(fetch_options.as_ref())
    }
}

foreign_class!(class CollectionInvitationManager {
    self_type CollectionInvitationManager;
    private constructor = empty;

    fn CollectionInvitationManager_::list_incoming(&self, options: Option<FetchOptions>) -> Result<InvitationListResponse, Error>;
    fn CollectionInvitationManager_::list_outgoing(&self, options: Option<FetchOptions>) -> Result<InvitationListResponse, Error>;
    fn CollectionInvitationManager::accept(&self, invitation: &SignedInvitation) -> Result<(), Error>;
    fn CollectionInvitationManager::reject(&self, invitation: &SignedInvitation) -> Result<(), Error>;
    fn CollectionInvitationManager::fetch_user_profile(&self, username: &str) -> Result<UserProfile, Error>;
    fn CollectionInvitationManager::invite(&self, collection: &Collection, username: &str, pubkey: &[u8], access_level: CollectionAccessLevel) -> Result<(), Error>;
    fn CollectionInvitationManager::disinvite(&self, invitation: &SignedInvitation) -> Result<(), Error>;
    fn CollectionInvitationManager::pubkey(&self) -> &[u8]; alias get_pubkey;
});

mod SignedInvitation_ {
    use super::*;

    pub fn uid(this: &SignedInvitation) -> String {
        this.uid().to_owned()
    }

    pub fn username(this: &SignedInvitation) -> String {
        this.username().to_owned()
    }

    pub fn collection(this: &SignedInvitation) -> String {
        this.collection().to_owned()
    }
}

foreign_class!(class SignedInvitation {
    self_type SignedInvitation;
    private constructor = empty;

    fn SignedInvitation_::uid(&self) -> String; alias get_uid;
    fn SignedInvitation_::username(&self) -> String; alias get_username;
    fn SignedInvitation_::collection(&self) -> String; alias get_collection;
    fn SignedInvitation::access_level(&self) -> CollectionAccessLevel; alias get_access_level;
    fn SignedInvitation::from_pubkey(&self) -> &[u8]; alias get_from_pubkey;
});

mod CollectionMember_ {
    use super::*;

    pub fn username(this: &CollectionMember) -> String {
        this.username().to_owned()
    }
}

foreign_class!(class CollectionMember {
    self_type CollectionMember;
    private constructor = empty;

    fn CollectionMember_::username(&self) -> String; alias get_username;
    fn CollectionMember::access_level(&self) -> CollectionAccessLevel; alias get_access_level;
});

type MemberListResponse = etebase::IteratorListResponse<CollectionMember>;

mod MemberListResponse_ {
    use super::*;

    pub fn iterator(this: &MemberListResponse) -> Option<String> {
        this.iterator().map(str::to_string)
    }

    pub fn data(this: &MemberListResponse) -> Vec<CollectionMember> {
        this.data().to_owned()
    }
}

foreign_class!(class MemberListResponse {
    self_type MemberListResponse;
    private constructor = empty;
    fn MemberListResponse_::iterator(&self) -> Option<String>; alias get_iterator;
    fn MemberListResponse_::data(&self) -> Vec<CollectionMember>; alias get_data;
    fn MemberListResponse::done(&self) -> bool; alias is_done;
});

mod CollectionMemberManager_ {
    use super::*;

    pub fn list(this: &CollectionMemberManager, fetch_options: Option<FetchOptions>) -> Result<MemberListResponse, Error> {
        let fetch_options = fetch_options.as_ref().map(|x| x.to_fetch_options());
        this.list(fetch_options.as_ref())
    }
}

foreign_class!(class CollectionMemberManager {
    self_type CollectionMemberManager;
    private constructor = empty;

    fn CollectionMemberManager_::list(&self, fetch_options: Option<FetchOptions>) -> Result<MemberListResponse, Error>;
    fn CollectionMemberManager::remove(&self, username: &str) -> Result<(), Error>;
    fn CollectionMemberManager::leave(&self) -> Result<(), Error>;
    fn CollectionMemberManager::modify_access_level(&self, username: &str, access_level: CollectionAccessLevel) -> Result<(), Error>;
});
